generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String         @id @default(uuid()) @db.Uuid
  email             String         @unique @db.VarChar(255)
  password          String         @db.VarChar(255)
  firstName         String         @map("first_name") @db.VarChar(100)
  lastName          String         @map("last_name") @db.VarChar(100)
  company           String?        @db.VarChar(255)
  bio               String?
  website           String?        @db.VarChar(500)
  avatar            String?        @db.VarChar(500)
  role              UserRole       @default(USER)
  isActive          Boolean        @default(true) @map("is_active")
  emailVerified     Boolean        @default(false) @map("email_verified")
  verificationToken String?        @map("verification_token") @db.VarChar(255)
  resetToken        String?        @map("reset_token") @db.VarChar(255)
  resetTokenExpiry  DateTime?      @map("reset_token_expiry") @db.Timestamptz(6)
  lastLoginAt       DateTime?      @map("last_login_at") @db.Timestamptz(6)
  createdAt         DateTime       @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt         DateTime       @updatedAt @map("updated_at") @db.Timestamptz(6)
  apiKeys           ApiKey[]
  apis              Api[]
  refreshTokens     RefreshToken[]
  reviews           Review[]
  subscriptions     Subscription[]
  usage             Usage[]

  @@index([email])
  @@index([isActive, emailVerified])
  @@map("users")
}

model Api {
  id            String         @id @default(uuid()) @db.Uuid
  name          String         @db.VarChar(255)
  description   String
  baseUrl       String         @map("base_url") @db.VarChar(500)
  category      ApiCategory
  version       String         @default("1.0.0") @db.VarChar(20)
  slug          String         @unique @db.VarChar(255)
  isPublic      Boolean        @default(true) @map("is_public")
  isActive      Boolean        @default(true) @map("is_active")
  tags          String[]       @db.VarChar(50)
  documentation String?
  pricing       Json
  rating        Decimal        @default(0) @db.Decimal(3, 2)
  totalRequests BigInt         @default(0) @map("total_requests")
  createdAt     DateTime       @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt     DateTime       @updatedAt @map("updated_at") @db.Timestamptz(6)
  ownerId       String         @map("owner_id") @db.Uuid
  owner         User           @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  reviews       Review[]
  subscriptions Subscription[]
  usage         Usage[]

  @@index([ownerId])
  @@index([category])
  @@index([isPublic, isActive])
  @@map("apis")
}

model ApiKey {
  id          String    @id @default(uuid()) @db.Uuid
  name        String    @db.VarChar(255)
  description String?
  key         String    @unique @db.VarChar(255)
  keyHash     String    @map("key_hash") @db.VarChar(255)
  permissions String[]  @default(["READ"]) @db.VarChar(50)
  isActive    Boolean   @default(true) @map("is_active")
  lastUsedAt  DateTime? @map("last_used_at") @db.Timestamptz(6)
  expiresAt   DateTime? @map("expires_at") @db.Timestamptz(6)
  rateLimit   Int       @default(1000) @map("rate_limit")
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime  @updatedAt @map("updated_at") @db.Timestamptz(6)
  userId      String    @map("user_id") @db.Uuid
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  usage       Usage[]

  @@index([userId])
  @@index([key])
  @@map("api_keys")
}

model Subscription {
  id            String           @id @default(uuid()) @db.Uuid
  planType      SubscriptionPlan @map("plan_type")
  billingPeriod BillingPeriod    @default(MONTHLY) @map("billing_period")
  monthlyLimit  Int              @default(1000) @map("monthly_limit")
  currentUsage  Int              @default(0) @map("current_usage")
  isActive      Boolean          @default(true) @map("is_active")
  startDate     DateTime         @default(now()) @map("start_date") @db.Timestamptz(6)
  expiresAt     DateTime?        @map("expires_at") @db.Timestamptz(6)
  canceledAt    DateTime?        @map("canceled_at") @db.Timestamptz(6)
  createdAt     DateTime         @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt     DateTime         @updatedAt @map("updated_at") @db.Timestamptz(6)
  userId        String           @map("user_id") @db.Uuid
  apiId         String           @map("api_id") @db.Uuid
  api           Api              @relation(fields: [apiId], references: [id], onDelete: Cascade)
  user          User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, apiId])
  @@map("subscriptions")
}

model Usage {
  id           String     @id @default(uuid()) @db.Uuid
  method       HttpMethod
  path         String     @db.VarChar(1000)
  statusCode   Int        @map("status_code") @db.SmallInt
  responseTime Int        @map("response_time")
  userAgent    String?    @map("user_agent") @db.VarChar(500)
  ipAddress    String?    @map("ip_address") @db.Inet
  timestamp    DateTime   @default(now()) @db.Timestamptz(6)
  userId       String     @map("user_id") @db.Uuid
  apiId        String     @map("api_id") @db.Uuid
  apiKeyId     String?    @map("api_key_id") @db.Uuid
  api          Api        @relation(fields: [apiId], references: [id], onDelete: Cascade)
  apiKey       ApiKey?    @relation(fields: [apiKeyId], references: [id])
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, timestamp(sort: Desc)])
  @@index([apiId, timestamp(sort: Desc)])
  @@map("usage")
}

model RefreshToken {
  id        String   @id @default(uuid()) @db.Uuid
  token     String   @unique @db.VarChar(255)
  tokenHash String   @map("token_hash") @db.VarChar(255)
  expiresAt DateTime @map("expires_at") @db.Timestamptz(6)
  isRevoked Boolean  @default(false) @map("is_revoked")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  userId    String   @map("user_id") @db.Uuid
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("refresh_tokens")
}

model Review {
  id        String   @id @default(uuid()) @db.Uuid
  rating    Int      @db.SmallInt
  comment   String?
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)
  userId    String   @map("user_id") @db.Uuid
  apiId     String   @map("api_id") @db.Uuid
  api       Api      @relation(fields: [apiId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, apiId])
  @@map("reviews")
}

enum UserRole {
  USER
  ADMIN
  MODERATOR
  SUPER_ADMIN

  @@map("user_role")
}

enum ApiCategory {
  AI_ML
  DATA
  FINANCE
  SOCIAL
  ECOMMERCE
  PRODUCTIVITY
  DEVELOPER_TOOLS
  COMMUNICATION
  MULTIMEDIA
  LOCATION
  WEATHER
  NEWS
  SPORTS
  GAMING
  HEALTHCARE
  EDUCATION
  OTHER

  @@map("api_category")
}

enum ApiStatus {
  ACTIVE
  INACTIVE
  DEPRECATED
  MAINTENANCE

  @@map("api_status")
}

enum HttpMethod {
  GET
  POST
  PUT
  DELETE
  PATCH
  HEAD
  OPTIONS

  @@map("http_method")
}

enum SubscriptionPlan {
  FREE
  BASIC
  PREMIUM
  ENTERPRISE

  @@map("subscription_plan")
}

enum BillingPeriod {
  MONTHLY
  YEARLY

  @@map("billing_period")
}
