generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
  MODERATOR
}

enum ApiCategory {
  AI_ML
  FINANCE
  SOCIAL_MEDIA
  E_COMMERCE
  WEATHER
  NEWS
  SPORTS
  ENTERTAINMENT
  PRODUCTIVITY
  DEVELOPER_TOOLS
  OTHER
}

enum HttpMethod {
  GET
  POST
  PUT
  DELETE
  PATCH
  HEAD
  OPTIONS
}

model User {
  id                String    @id @default(cuid())
  email             String    @unique
  password          String
  firstName         String    @map("first_name")
  lastName          String    @map("last_name")
  company           String?
  bio               String?
  website           String?
  avatar            String?
  role              UserRole  @default(USER)
  isActive          Boolean   @default(true) @map("is_active")
  emailVerified     Boolean   @default(false) @map("email_verified")
  verificationToken String?   @map("verification_token")
  resetToken        String?   @map("reset_token")
  resetTokenExpiry  DateTime? @map("reset_token_expiry")
  lastLoginAt       DateTime? @map("last_login_at")
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")

  // Relations
  apis          Api[]
  apiKeys       ApiKey[]
  subscriptions Subscription[]
  usage         Usage[]
  refreshTokens RefreshToken[]
  reviews       Review[]
  auditLogs     AuditLog[]

  @@map("users")
}

model Api {
  id            String      @id @default(cuid())
  name          String
  description   String
  baseUrl       String      @map("base_url")
  category      ApiCategory @default(OTHER)
  version       String      @default("1.0.0")
  slug          String      @unique
  isPublic      Boolean     @default(true) @map("is_public")
  isActive      Boolean     @default(true) @map("is_active")
  tags          String      @default("[]") // JSON string
  documentation String?
  pricing       String      @default("{}") // JSON string
  rating        Float       @default(0.0)
  totalRequests Int         @default(0) @map("total_requests")
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")

  // Relations
  ownerId       String @map("owner_id")
  owner         User   @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  subscriptions Subscription[]
  usage         Usage[]
  reviews       Review[]

  @@map("apis")
}

model ApiKey {
  id          String    @id @default(cuid())
  name        String
  description String?
  key         String    @unique
  keyHash     String    @map("key_hash")
  permissions String    @default("[]") // JSON string
  isActive    Boolean   @default(true) @map("is_active")
  lastUsedAt  DateTime? @map("last_used_at")
  expiresAt   DateTime? @map("expires_at")
  rateLimit   Int       @default(100) @map("rate_limit")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  // Relations
  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  usage Usage[]

  @@map("api_keys")
}

model Subscription {
  id           String    @id @default(cuid())
  planType     String    @default("free") @map("plan_type")
  billingPeriod String   @default("monthly") @map("billing_period")
  monthlyLimit Int       @default(1000) @map("monthly_limit")
  currentUsage Int       @default(0) @map("current_usage")
  isActive     Boolean   @default(true) @map("is_active")
  startDate    DateTime  @map("start_date")
  expiresAt    DateTime? @map("expires_at")
  canceledAt   DateTime? @map("canceled_at")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")

  // Relations
  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  apiId  String @map("api_id")
  api    Api    @relation(fields: [apiId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

model Usage {
  id           String     @id @default(cuid())
  method       HttpMethod
  path         String
  statusCode   Int        @map("status_code")
  responseTime Int        @map("response_time")
  requestSize  Int?       @map("request_size")
  responseSize Int?       @map("response_size")
  userAgent    String?    @map("user_agent")
  ipAddress    String?    @map("ip_address")
  country      String?
  region       String?
  timestamp    DateTime   @default(now())
  metadata     String     @default("{}") // JSON string

  // Relations
  userId   String  @map("user_id")
  user     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  apiId    String  @map("api_id")
  api      Api     @relation(fields: [apiId], references: [id], onDelete: Cascade)
  apiKeyId String? @map("api_key_id")
  apiKey   ApiKey? @relation(fields: [apiKeyId], references: [id], onDelete: SetNull)

  @@map("usage")
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  tokenHash String   @map("token_hash")
  expiresAt DateTime @map("expires_at")
  isRevoked Boolean  @default(false) @map("is_revoked")
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

model Review {
  id        String   @id @default(cuid())
  rating    Int
  comment   String?
  isPublic  Boolean  @default(true) @map("is_public")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  apiId  String @map("api_id")
  api    Api    @relation(fields: [apiId], references: [id], onDelete: Cascade)

  @@map("reviews")
}

model AuditLog {
  id        String   @id @default(cuid())
  action    String
  resource  String
  details   String   @default("{}")
  ipAddress String?  @map("ip_address")
  userAgent String?  @map("user_agent")
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  userId String? @map("user_id")
  user   User?   @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("audit_logs")
}